{"version":3,"sources":["components/Header.jsx","components/artist/views/ArtistCard.jsx","components/artist/ArtistWebAPIUtils.js","utils/AppDispatcher.js","utils/ActionTypes.js","components/artist/ArtistActionCreators.js","components/artist/ArtistStore.js","components/artist/views/ArtistCardList.jsx","components/album/AlbumActionCreators.js","components/album/AlbumListLoading.jsx","components/album/AlbumCard.jsx","components/album/AlbumList.jsx","components/album/AlbumWebAPIUtils.js","components/album/AlbumStore.js","components/album/AlbumCardList.jsx","components/tracks/TrackActionCreator.js","components/tracks/views/TracksLoading.jsx","components/tracks/views/TrackCard.jsx","components/tracks/views/TrackList.jsx","components/tracks/TrackWebApiUtils.js","components/tracks/TrackStore.js","components/tracks/views/Tracks.jsx","components/Content.jsx","components/Search.jsx","App.jsx","index.js"],"names":["PrimarySearchAppBar","classes","useStyles","className","grow","AppBar","position","Toolbar","Typography","title","variant","noWrap","makeStyles","theme","flexGrow","menuButton","marginRight","spacing","display","breakpoints","up","search","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","padding","transition","transitions","create","sectionDesktop","sectionMobile","ArtistCard","request","props","strArtistThumb","strArtist","React","useState","open","setOpen","handleClose","defaultImage","Card","style","card","CardActionArea","onClick","CardMedia","component","alt","image","CardContent","Dialog","fullScreen","onClose","TransitionComponent","Transition","appBar","IconButton","edge","aria-label","flex","forwardRef","ref","Slide","direction","AppDispatcher","Dispatcher","ActionTypes","GET_ARTIST_LIST","ARTIST_LIST_SUCCESS","ARTIST_LIST_FAIURE","GET_ARTIST_DETAILS","ARTIST_DETAILS_SUCCESS","ARTIST_DETAILS_FAILURE","GET_ALBUM_LIST","ALBUM_LIST_SUCCESS","ALBUM_LIST_FAIURE","GET_ALBUM_DETAILS","ALBUM_DETAILS_SUCCESS","ALBUM_DETAILS_FAILURE","GET_TRACK_LIST","TRACK_LIST_SUCCESS","TRACK_LIST_FAIURE","GET_TRACK_DETAILS","TRACK_DETAILS_SUCCESS","TRACK_DETAILS_FAILURE","ArtistActionCreators","getArtistList","searchText","dispatch","type","successArtistList","data","failureArtistList","error","ARTIST_LIST_FAILURE","getArtistDetails","successArtistDetails","failureArtistDetails","ArtistWebAPIUtils","getArtistLists","abort","undefined","uri","concat","$","ajax","url","success","artists","details","ArtistStore","assign","EventEmitter","prototype","emitChange","this","emit","addChangeListener","callback","on","removeChangeListener","removeListener","dispatchToken","register","action","getStateFromStore","artistList","ArtistCardList","state","onChange","bind","setState","GridList","gridList","map","tile","GridListTile","key","gridListTile","Component","root","flexWrap","overflow","marginTop","transform","titleBar","background","AlbumActionCreators","getAlbumList","successAlbumList","failureAlbumList","ALBUM_LIST_FAILURE","getAlbumDetails","successAlbumDetails","failureAlbumDetails","AlbumListLoading","LinearProgress","AlbumCard","strAlbumThumb","strAlbum","AlbumList","albumList","idAlbum","AlbumWebAPIUtils","getAlbumLists","album","albums","isLoading","AlbumStore","setIsLoading","val","getIsLoading","getStateFromAlbumStore","AlbumCardList","onAlbumChange","TrackActionCreator","getTrackList","successTrackList","failureTrackList","TRACK_LIST_FAILURE","getTrackDetails","successTrackDetails","failureTrackDetails","TrackListLoading","TrackCard","strTrackThumb","strTrack","TrackList","trackList","idTrack","TrackWebApiUtils","getTrackLists","track","tracks","TrackStore","getStateFromTrackStore","Tracks","onTrackChange","TracksLoading","Content","searchResults","Search","onKeyPressEnter","event","target","value","onInputChange","keyCode","which","preventDefault","Paper","TextField","e","onKeyPress","id","label","placeholder","textField","margin","fullWidth","icon","paddingLeft","outline","App","handleChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96de0208.chunk.js","sourcesContent":["import React from 'react'\nimport { fade, makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\n\nexport default function PrimarySearchAppBar() {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.grow}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n\t\t\t\t\t\tMusic Search App\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n\nconst useStyles = makeStyles(theme => ({\n  grow: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block'\n    }\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25)\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto'\n    }\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  inputRoot: {\n    color: 'inherit'\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: 200\n    }\n  },\n  sectionDesktop: {\n    display: 'none',\n    [theme.breakpoints.up('md')]: {\n      display: 'flex'\n    }\n  },\n  sectionMobile: {\n    display: 'flex',\n    [theme.breakpoints.up('md')]: {\n      display: 'none'\n    }\n  }\n}))\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport Dialog from '@material-ui/core/Dialog'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport Slide from '@material-ui/core/Slide'\n\nimport './artist.css'\n\nfunction ArtistCard(props) {\n  const { strArtistThumb, strArtist } = props\n  const classes = useStyles()\n  const [open, setOpen] = React.useState(false)\n\n  function handleClickOpen() {\n    setOpen(true)\n  }\n\n  function handleClose() {\n    setOpen(false)\n  }\n  let defaultImage = \"https://pngimage.net/wp-content/uploads/2018/05/default-user-profile-image-png-2.png\"\n\n  if (strArtistThumb !== \"\") {\n    defaultImage = strArtistThumb\n  }\n\n  return (\n    <div>\n      <Card style={useStyles.card}>\n        <CardActionArea onClick={handleClickOpen} style={{ padding: '5px' }}>\n          <CardMedia\n            className=\"artist-card__media\"\n            component=\"img\"\n            alt={strArtist}\n            image={defaultImage}\n            title={strArtist}\n          />\n          <CardContent style={{ padding: '0' }}>\n            <Typography variant=\"subtitle1\">{strArtist}</Typography>\n          </CardContent>\n        </CardActionArea>\n      </Card>\n\n      <Dialog\n        fullScreen\n        open={open}\n        onClose={handleClose}\n        TransitionComponent={Transition}\n      >\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              onClick={handleClose}\n              aria-label=\"Close\"\n            >\n              <CloseIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              {strArtist}\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </Dialog>\n    </div>\n  )\n}\nexport default ArtistCard\n\nArtistCard.propTypes = {\n  strArtist: PropTypes.string.isRequired,\n  strArtistThumb: PropTypes.string.isRequired\n}\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    position: 'relative'\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1\n  }\n}))\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />\n})\n","import $ from 'jquery'\nimport ArtistActionCreators from './ArtistActionCreators'\n\nlet request\n\nconst ArtistWebAPIUtils = {\n\n  \n\n  getArtistLists(searchText) {\n     if(request) {\n    request.abort()\n  }\n    if (searchText === '' || searchText === undefined) searchText = 'Coldplay'\n    const uri = 'https://www.theaudiodb.com/api/v1/json/1/search.php?s='.concat(searchText)\n\n    request = $.ajax({\n      url: uri,\n      type: 'GET',\n\n      success(data) {\n        // console.log(data.artists)\n        ArtistActionCreators.successArtistList(data.artists)\n        request = null;\n      },\n\n      error() {\n        ArtistActionCreators.failureArtistList('FAILURE_SORRY')\n        request = null;\n      },\n    })\n  },\n\n  getArtistDetails(searchText) {\n    const uri = 'movies_list/'.concat(searchText === '' ? 'star' : searchText)\n\n    $.ajax({\n      url: uri,\n      type: 'GET',\n\n      success(data) {\n        ArtistActionCreators.successArtistDetails('SUCCESS_DETAIL_DATA')\n      },\n\n      error() {\n        ArtistActionCreators.failureArtistDetails('FAILURE_DETAIL_SORRY')\n      },\n    })\n  },\n}\n\nexport default ArtistWebAPIUtils\n","import { Dispatcher } from 'flux'\n\nconst AppDispatcher = new Dispatcher()\n\nexport default AppDispatcher\n","const ActionTypes = {\n  GET_ARTIST_LIST: 'GET_ARTIST_LIST',\n  ARTIST_LIST_SUCCESS: 'ARTIST_LIST_SUCCESS',\n  ARTIST_LIST_FAIURE: 'ARTIST_LIST_FAIURE',\n  GET_ARTIST_DETAILS: 'GET_ARTIST_DETAILS',\n  ARTIST_DETAILS_SUCCESS: 'ARTIST_DETAILS_SUCCESS',\n  ARTIST_DETAILS_FAILURE: 'ARTIST_DETAILS_FAILURE',\n  GET_ALBUM_LIST: 'GET_ALBUM_LIST',\n  ALBUM_LIST_SUCCESS: 'ALBUM_LIST_SUCCESS',\n  ALBUM_LIST_FAIURE: 'ALBUM_LIST_FAIURE',\n  GET_ALBUM_DETAILS: 'GET_ALBUM_DETAILS',\n  ALBUM_DETAILS_SUCCESS: 'ALBUM_DETAILS_SUCCESS',\n  ALBUM_DETAILS_FAILURE: 'ALBUM_DETAILS_FAILURE',\n  GET_TRACK_LIST: 'GET_TRACK_LIST',\n  TRACK_LIST_SUCCESS: 'TRACK_LIST_SUCCESS',\n  TRACK_LIST_FAIURE: 'TRACK_LIST_FAIURE',\n  GET_TRACK_DETAILS: 'GET_TRACK_DETAILS',\n  TRACK_DETAILS_SUCCESS: 'TRACK_DETAILS_SUCCESS',\n  TRACK_DETAILS_FAILURE: 'TRACK_DETAILS_FAILURE',\n\n}\n\nexport default ActionTypes","import AppDispatcher from '../../utils/AppDispatcher'\nimport ActionTypes from '../../utils/ActionTypes'\n\nconst ArtistActionCreators = {\n  getArtistList(searchText) {\n    AppDispatcher.dispatch({\n      type: ActionTypes.GET_ARTIST_LIST,\n      searchText, // Queen\n    })\n  },\n\n  successArtistList(data) {\n    AppDispatcher.dispatch({\n      type: ActionTypes.ARTIST_LIST_SUCCESS,\n      data, // SUCCESS\n    })\n  },\n\n  failureArtistList(error) {\n    AppDispatcher.dispatch({\n      type: ActionTypes.ARTIST_LIST_FAILURE,\n      error, // FAILURE\n    })\n  },\n\n  getArtistDetails(searchText) {\n    AppDispatcher.dispatch({\n      type: ActionTypes.GET_ARTIST_DETAILS,\n      searchText, // Sting\n    })\n  },\n  successArtistDetails(data) {\n    AppDispatcher.dispatch({\n      type: ActionTypes.ARTIST_DETAILS_SUCCESS,\n      data, // SUCCESS\n    })\n  },\n\n  failureArtistDetails(error) {\n    AppDispatcher.dispatch({\n      type: ActionTypes.ARTIST_DETAILS_FAILURE,\n      error, // FAILURE\n    })\n  },\n\n}\n\nexport default ArtistActionCreators\n","\nimport { EventEmitter } from 'events'\nimport assign from 'object-assign'\n\nimport ArtistWebAPIUtils from './ArtistWebAPIUtils'\nimport AppDispatcher from '../../utils/AppDispatcher'\nimport ActionTypes from '../../utils/ActionTypes'\n// import ArtistActionCreators from './ArtistActionCreators'\n\n\nconst CHANGE_EVENT = 'change'\n\n// Store instances/variables\nlet artists = []\nlet details = []\n\nconst ArtistStore = assign({}, EventEmitter.prototype, {\n  // Public functions the views can see\n\n  emitChange() {\n    this.emit(CHANGE_EVENT)\n  },\n\n\n  // View can subscribe to store events\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback)\n  },\n\n  // View can un-subscribe to store events\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback)\n  },\n\n  // View can retrieve specific values that store manages\n  getArtistList() {\n    return artists\n  },\n\n  getArtistDetails() {\n    return details\n  },\n\n})\n\nArtistStore.dispatchToken = AppDispatcher.register((action) => {\n  switch (action.type) {\n  case ActionTypes.GET_ARTIST_LIST:\n    // console.log(`Store invoked ${action}`)\n    // Take action - Make API call and update state\n    ArtistWebAPIUtils.getArtistLists(action.searchText)\n    ArtistStore.emitChange()\n    break\n  case ActionTypes.ARTIST_LIST_SUCCESS:\n    artists = action.data // update store instance\n    ArtistStore.emitChange()\n    break\n  case ActionTypes.ARTIST_LIST_FAILURE:\n    artists = action.error // update store instance\n    ArtistStore.emitChange()\n    break\n  case ActionTypes.GET_ARTIST_DETAILS:\n    // Take action - Make API call and update state\n    ArtistWebAPIUtils.getArtistDetails(action.searchText)\n    ArtistStore.emitChange()\n    break\n  case ActionTypes.ARTIST_DETAILS_SUCCESS:\n    details = action.data // update store instance\n    ArtistStore.emitChange()\n    break\n  case ActionTypes.ARTIST_DETAILS_FAILURE:\n    details = action.error // update store instance\n    ArtistStore.emitChange()\n    break\n  default:\n    // do nothing\n  }\n})\n\nexport default ArtistStore\n","import React, { Component } from 'react'\nimport { GridList, GridListTile, Typography } from '@material-ui/core'\nimport ArtistCard from './ArtistCard'\nimport ArtistActionCreators from '../ArtistActionCreators'\nimport './artist.css'\nimport ArtistStore from '../ArtistStore'\n\n// Private function that gets values from store\nfunction getStateFromStore() {\n  return {\n    artistList: ArtistStore.getArtistList()\n  }\n}\n\nexport default class ArtistCardList extends Component {\n  constructor(props) {\n    super(props)\n\n    // Set view's state based on store data\n    this.state = getStateFromStore()\n    this.onChange = this.onChange.bind(this)\n  }\n\n  // Subscribe to store events on mount\n  componentDidMount() {\n    ArtistActionCreators.getArtistList('')\n    ArtistStore.addChangeListener(this.onChange)\n  }\n\n  // Un-Subscribe to store events on un-mount\n  componentWillUnmount() {\n    ArtistStore.removeChangeListener(this.onChange)\n  }\n\n  // Store uses this as callback fn when store is updated\n  onChange() {\n    this.setState(getStateFromStore())\n  }\n\n\n\n  render() {\n    const { artistList } = this.state\n\n\n    if (artistList) {\n      return (\n        <div className='list_container'>\n          <GridList style={useStyles.gridList}>\n            {/* {console.log(this.state.artistList)} */}\n            {artistList.map(tile => (\n              // TODO: Add map key\n              <GridListTile key='tile.strArtist' style={useStyles.gridListTile}>\n                <ArtistCard\n                  strArtist={tile.strArtist}\n                  strArtistThumb={tile.strArtistThumb}\n                />\n\n              </GridListTile>\n            ))}\n          </GridList>\n\n        </div>\n      )\n    } else {\n      // TODO: Error handling\n      return (\n        <div className='list_container'>\n          <Typography variant='h5' color='textPrimary' >\n            No Results found\n          </Typography>\n        </div>\n      )\n    }\n  }\n}\n\nconst useStyles = {\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    overflow: 'hidden',\n    marginTop: '20px',\n    padding: '20px',\n  },\n  gridList: {\n    flexWrap: 'nowrap',\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n    transform: 'translateZ(0)'\n  },\n  title: {\n  },\n  titleBar: {\n    background:\n      'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)'\n  },\n  gridListTile: {\n    width: '160px'\n  }\n}\n","import AppDispatcher from '../../utils/AppDispatcher'\nimport ActionTypes from '../../utils/ActionTypes'\n\nconst AlbumActionCreators = {\n  getAlbumList(searchText) {\n    AppDispatcher.dispatch({\n      type: ActionTypes.GET_ALBUM_LIST,\n      searchText, // Coldplay\n    })\n  },\n\n  successAlbumList(data) {\n    AppDispatcher.dispatch({\n      type: ActionTypes.ALBUM_LIST_SUCCESS,\n      data, // SUCCESS\n    })\n  },\n\n  failureAlbumList(error) {\n    AppDispatcher.dispatch({\n      type: ActionTypes.ALBUM_LIST_FAILURE,\n      error, // FAILURE\n    })\n  },\n\n  getAlbumDetails(searchText) {\n    AppDispatcher.dispatch({\n      type: ActionTypes.GET_ALBUM_DETAILS,\n      searchText, // Sting\n    })\n  },\n  successAlbumDetails(data) {\n    AppDispatcher.dispatch({\n      type: ActionTypes.ALBUM_DETAILS_SUCCESS,\n      data, // SUCCESS\n    })\n  },\n\n  failureAlbumDetails(error) {\n    AppDispatcher.dispatch({\n      type: ActionTypes.ALBUM_DETAILS_FAILURE,\n      error, // FAILURE\n    })\n  },\n\n}\n\nexport default AlbumActionCreators\n","import React from 'react'\nimport { LinearProgress } from '@material-ui/core';\n\n\n\nfunction AlbumListLoading() {\n\n  return (\n    <div >\n      <LinearProgress variant=\"query\" className='LinearProgress' />\n    </div>\n  )\n}\n\nexport default AlbumListLoading\n","import React from 'react'\n\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Dialog from '@material-ui/core/Dialog'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport Slide from '@material-ui/core/Slide'\n\n\nfunction AlbumCard(props) {\n  const { strAlbumThumb, strAlbum, } = props\n  const classes = useStyles()\n  const [open, setOpen] = React.useState(false)\n\n  function handleClickOpen() {\n    setOpen(true)\n  }\n\n  function handleClose() {\n    setOpen(false)\n  }\n  let defaultImage = \"https://www.songandlyrics.net/assets/img/album.jpg\"\n\n  if (strAlbumThumb !== \"\") {\n    defaultImage = strAlbumThumb\n  }\n\n  return (\n    <div>\n      <Card style={useStyles.card}>\n        <CardActionArea\n          onClick={handleClickOpen}\n          style={{ padding: '5px' }}\n        >\n          <CardMedia\n            className=\"album-card__media\"\n            component=\"img\"\n            alt={strAlbum}\n            image={defaultImage}\n            title={strAlbum}\n          />\n          <CardContent style={{ padding: '0' }}>\n            <Typography variant=\"subtitle1\">\n              {strAlbum}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n      </Card>\n\n      <Dialog\n        fullScreen\n        open={open}\n        onClose={handleClose}\n        TransitionComponent={Transition}\n      >\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"Close\">\n              <CloseIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              {strAlbum}\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </Dialog>\n\n    </div>\n  )\n}\nexport default AlbumCard\n\n\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    position: 'relative',\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n  },\n}))\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />\n})","import React from 'react'\nimport { GridList, GridListTile, Typography } from '@material-ui/core'\nimport AlbumCard from './AlbumCard'\nimport './css/AlbumList.css'\n\nfunction AlbumList(props) {\n  const { albumList } = props\n  if (albumList) {\n    return (\n      <div className='list_container'>\n        <GridList\n          style={useStyles.gridList}\n        >\n          {albumList.map(tile => (\n            // TODO: Add map key\n            <GridListTile\n              style={useStyles.gridListTile}\n              key={tile.idAlbum}\n            >\n              <AlbumCard\n                strAlbum={tile.strAlbum}\n                strAlbumThumb={tile.strAlbumThumb}\n              />\n            </GridListTile>\n          ))}\n        </GridList>\n      </div>\n    )\n  } else {\n    // TODO: Error handling\n    return (\n      <div className='list_container'>\n        <Typography variant='h5' color='textPrimary' >\n          No Results found\n      </Typography>\n      </div>\n    )\n  }\n}\n\n\n\nconst useStyles = {\n\n  gridList: {\n    flexWrap: 'nowrap',\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n    transform: 'translateZ(0)'\n  },\n  title: {\n  },\n  titleBar: {\n    background:\n      'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)'\n  },\n  gridListTile: {\n    width: '160px'\n  }\n}\n\nexport default AlbumList\n\n","import $ from 'jquery'\nimport AlbumActionCreators from './AlbumActionCreators'\n\nlet request;\n\nconst AlbumWebAPIUtils = {\n\n   \n  \n  getAlbumLists(searchText) {\n\n     if (request) {\n      request.abort();\n  }\n\n    if (searchText === '' || searchText === undefined) searchText = 'Coldplay'\n    const uri = 'https://theaudiodb.com/api/v1/json/1/searchalbum.php?s='.concat(searchText)\n\n    request = $.ajax({\n      url: uri,\n      type: 'GET',\n\n      success(data) {\n        AlbumActionCreators.successAlbumList(data.album)\n        request = null;\n      },\n\n      error() {\n        AlbumActionCreators.failureAlbumList('FAILURE_SORRY')\n        request = null;\n      },\n    })\n  },\n\n  getAlbumDetails(searchText) {\n    const uri = 'movies_list/'.concat(searchText === '' ? 'star' : searchText)\n\n    $.ajax({\n      url: uri,\n      type: 'GET',\n\n      success(data) {\n        AlbumActionCreators.successAlbumDetails('SUCCESS_DETAIL_DATA')\n      },\n\n      error() {\n        AlbumActionCreators.failureAlbumDetails('FAILURE_DETAIL_SORRY')\n      },\n    })\n  },\n}\n\nexport default AlbumWebAPIUtils\n","\nimport { EventEmitter } from 'events'\nimport assign from 'object-assign'\n\nimport AlbumWebAPIUtils from './AlbumWebAPIUtils'\nimport AppDispatcher from '../../utils/AppDispatcher'\nimport ActionTypes from '../../utils/ActionTypes'\n\n\nconst CHANGE_EVENT = 'change'\n\n// Store instances/variables\nlet albums = []\nlet details = []\nlet isLoading = false\n\nconst AlbumStore = assign({}, EventEmitter.prototype, {\n  // Public functions the views can see\n\n  emitChange() {\n    this.emit(CHANGE_EVENT)\n  },\n\n\n  // View can subscribe to store events\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback)\n  },\n\n  // View can un-subscribe to store events\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback)\n  },\n\n  // View can retrieve specific values that store manages\n  getAlbumList() {\n    return albums\n  },\n\n  getAlbumDetails() {\n    return details\n  },\n  setIsLoading (val){\n    isLoading = val\n  },\n  getIsLoading() {\n    return isLoading\n  },\n\n})\n\nAlbumStore.dispatchToken = AppDispatcher.register((action) => {\n  switch (action.type) {\n  case ActionTypes.GET_ALBUM_LIST:\n    // console.log(`Store invoked ${action}`)\n    // Take action - Make API call and update state\n    AlbumWebAPIUtils.getAlbumLists(action.searchText)\n    AlbumStore.setIsLoading (true)\n    AlbumStore.emitChange()\n    break\n  case ActionTypes.ALBUM_LIST_SUCCESS:\n    albums = action.data // update store instance\n    AlbumStore.setIsLoading (false)\n    AlbumStore.emitChange()\n    break\n  case ActionTypes.ALBUM_LIST_FAILURE:\n    albums = action.error // update store instance\n    AlbumStore.setIsLoading (false)\n    AlbumStore.emitChange()\n    break\n  case ActionTypes.GET_ALBUM_DETAILS:\n    // Take action - Make API call and update state\n    AlbumWebAPIUtils.getAlbumDetails(action.searchText)\n    AlbumStore.setIsLoading (true)\n    AlbumStore.emitChange()\n    break\n  case ActionTypes.ALBUM_DETAILS_SUCCESS:\n    details = action.data // update store instance\n    AlbumStore.setIsLoading (false)\n    AlbumStore.emitChange()\n    break\n  case ActionTypes.ALBUM_DETAILS_FAILURE:\n    details = action.error // update store instance\n    AlbumStore.setIsLoading (false)\n    AlbumStore.emitChange()\n    break\n  default:\n    // do nothing\n  }\n})\n\nexport default AlbumStore\n","import React, { Component } from 'react'\n// import { GridList, GridListTile } from '@material-ui/core'\nimport AlbumActionCreators from './AlbumActionCreators'\n// import AlbumCard from './AlbumCard'\nimport AlbumListLoading from './AlbumListLoading'\nimport AlbumList from './AlbumList'\nimport AlbumStore from './AlbumStore'\n\n// Private function that gets values from store\nfunction getStateFromAlbumStore() {\n  // console.log('AlbumCardList ' + this.state.albumList)\n  return {\n    albumList: AlbumStore.getAlbumList(),\n    isLoading: AlbumStore.getIsLoading()\n  }\n}\n\nexport default class AlbumCardList extends Component {\n  constructor(props) {\n    super(props)\n\n    // Set view's state based on store data\n    this.state = getStateFromAlbumStore()\n    this.onAlbumChange = this.onAlbumChange.bind(this)\n  }\n\n  // Subscribe to store events on mount\n  componentDidMount() {\n    AlbumActionCreators.getAlbumList('')\n    AlbumStore.addChangeListener(this.onAlbumChange)\n  }\n\n  // Un-Subscribe to store events on un-mount\n  componentWillUnmount() {\n    AlbumStore.removeChangeListener(this.onAlbumChange)\n  }\n\n  // Store uses this as callback fn when store is updated\n  onAlbumChange() {\n    this.setState(getStateFromAlbumStore())\n  }\n\n  render() {\n    const { albumList } = this.state\n    const { isLoading } = this.state\n\n    return (\n      <div>\n        {isLoading\n          ? <AlbumListLoading />\n          : <AlbumList albumList={albumList} />\n        }\n      </div>\n    )\n  }\n}\n","import AppDispatcher from '../../utils/AppDispatcher'\nimport ActionTypes from '../../utils/ActionTypes'\n\nconst TrackActionCreator = {\n  getTrackList(searchText) {\n    AppDispatcher.dispatch({\n      type: ActionTypes.GET_TRACK_LIST,\n      searchText, // Coldplay\n    })\n  },\n\n  successTrackList(data) {\n    AppDispatcher.dispatch({\n      type: ActionTypes.TRACK_LIST_SUCCESS,\n      data, // SUCCESS\n    })\n  },\n\n  failureTrackList(error) {\n    AppDispatcher.dispatch({\n      type: ActionTypes.TRACK_LIST_FAILURE,\n      error, // FAILURE\n    })\n  },\n\n  getTrackDetails(searchText) {\n    AppDispatcher.dispatch({\n      type: ActionTypes.GET_TRACK_DETAILS,\n      searchText, // Sting\n    })\n  },\n  successTrackDetails(data) {\n    AppDispatcher.dispatch({\n      type: ActionTypes.TRACK_DETAILS_SUCCESS,\n      data, // SUCCESS\n    })\n  },\n\n  failureTrackDetails(error) {\n    AppDispatcher.dispatch({\n      type: ActionTypes.TRACK_DETAILS_FAILURE,\n      error, // FAILURE\n    })\n  },\n\n}\n\nexport default TrackActionCreator\n","import React from 'react'\nimport { LinearProgress } from '@material-ui/core';\n\n\n\nfunction TrackListLoading() {\n\n  return (\n    <div >\n      <LinearProgress variant=\"query\" className='LinearProgress' />\n    </div>\n  )\n}\n\nexport default TrackListLoading\n","import React from 'react'\n\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Dialog from '@material-ui/core/Dialog'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport Slide from '@material-ui/core/Slide'\n\nfunction TrackCard(props) {\n  const { strTrackThumb, strTrack, } = props\n  const classes = useStyles()\n  const [open, setOpen] = React.useState(false)\n\n  function handleClickOpen() {\n    setOpen(true)\n  }\n\n  function handleClose() {\n    setOpen(false)\n  }\n\n  let defaultImage = \"https://www.glyric.com/modules/custom/glyrics_custom/images/player_default_cover.png\"\n\n  if (strTrackThumb !== null) {\n    defaultImage = strTrackThumb\n  }\n  return (\n    <div>\n      <Card style={useStyles.card}>\n        <CardActionArea\n          onClick={handleClickOpen}\n          style={{ padding: '5px' }}\n        >\n          <CardMedia\n            className=\"album-card__media\"\n            component=\"img\"\n            alt={strTrack}\n            image={defaultImage}\n            title={strTrack}\n          />\n          <CardContent style={{ padding: '0' }}>\n            <Typography variant=\"subtitle1\">\n              {strTrack}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n      </Card>\n\n      <Dialog\n        fullScreen\n        open={open}\n        onClose={handleClose}\n        TransitionComponent={Transition}\n      >\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"Close\">\n              <CloseIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              {strTrack}\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </Dialog>\n\n    </div>\n  )\n}\nexport default TrackCard\n\n\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    position: 'relative',\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n  },\n}))\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />\n})","import React from 'react'\nimport { GridList, GridListTile, Typography } from '@material-ui/core'\nimport TrackCard from './TrackCard'\nimport '../css/TrackList.css'\n\nfunction TrackList(props) {\n  const { trackList } = props\n  if (trackList) {\n    return (\n      <div className='list_container'>\n        <GridList style={useStyles.gridList}>\n          {trackList.map(tile => (\n            // TODO: Add map key\n            <GridListTile\n              style={useStyles.gridListTile}\n              key={tile.idTrack}\n            >\n              <TrackCard\n                strTrack={tile.strTrack}\n                strTrackThumb={tile.strTrackThumb}\n              />\n            </GridListTile>\n          ))}\n        </GridList>\n      </div>\n    )\n  } else {\n    // TODO: Error handling\n    return (\n      <div className='list_container'>\n        <Typography variant='h5' color='textPrimary' >\n          No Results found\n      </Typography>\n      </div>\n    )\n  }\n}\n\n\n\nconst useStyles = {\n  root: {\n\n  },\n  gridList: {\n    flexWrap: 'nowrap',\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n    transform: 'translateZ(0)'\n  },\n  title: {\n  },\n  titleBar: {\n    background:\n      'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)'\n  },\n  gridListTile: {\n    width: '160px'\n  }\n}\n\nexport default TrackList\n\n","import $ from 'jquery'\nimport TrackActionCreator from './TrackActionCreator'\n\nlet request;\n\nconst TrackWebApiUtils = {\n  getTrackLists(searchText) {\n\n    if (request) {\n      request.abort();\n    }\n\n    if (searchText === '' || searchText === undefined) searchText = 'Coldplay'\n    const uri = 'https://theaudiodb.com/api/v1/json/1/track-top10.php?s='.concat(searchText)\n\n    request = $.ajax({\n      url: uri,\n      type: 'GET',\n\n      success(data) {\n        TrackActionCreator.successTrackList(data.track)\n        request = null;\n\n      },\n\n      error() {\n        TrackActionCreator.failureTrackList('FAILURE_SORRY')\n        request = null;\n      \n      },\n    })\n  },\n\n  getTrackDetails(searchText) {\n    const uri = 'movies_list/'.concat(searchText === '' ? 'star' : searchText)\n\n    $.ajax({\n      url: uri,\n      type: 'GET',\n\n      success(data) {\n        TrackActionCreator.successTrackDetails('SUCCESS_DETAIL_DATA')\n      },\n\n      error() {\n        TrackActionCreator.failureTrackDetails('FAILURE_DETAIL_SORRY')\n      },\n    })\n  },\n}\n\nexport default TrackWebApiUtils\n","\nimport { EventEmitter } from 'events'\nimport assign from 'object-assign'\n\nimport TrackWebApiUtils from './TrackWebApiUtils'\nimport AppDispatcher from '../../utils/AppDispatcher'\nimport ActionTypes from '../../utils/ActionTypes'\n\n\nconst CHANGE_EVENT = 'change'\n\nlet tracks = []\nlet details = []\nlet isLoading = false\n\nconst TrackStore = assign({}, EventEmitter.prototype, {\n  // Public functions the views can see\n\n  emitChange() {\n    this.emit(CHANGE_EVENT)\n  },\n\n\n  // View can subscribe to store events\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback)\n  },\n\n  // View can un-subscribe to store events\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback)\n  },\n    // View can retrieve specific values that store manages\n  getTrackList() {\n    return tracks\n  },\n\n  getTrackDetails() {\n    return details\n  },\n  setIsLoading (val){\n    isLoading = val\n  },\n  getIsLoading() {\n    return isLoading\n  },\n\n\n})\n\nTrackStore.dispatchToken = AppDispatcher.register((action) => {\n  switch (action.type) {\n  case ActionTypes.GET_TRACK_LIST:\n    // console.log(`Store invoked ${action}`)\n    // Take action - Make API call and update state\n    TrackStore.setIsLoading (true)\n    TrackWebApiUtils.getTrackLists(action.searchText)\n    TrackStore.emitChange()\n    break\n  case ActionTypes.TRACK_LIST_SUCCESS:\n    tracks = action.data // update store instance\n    TrackStore.setIsLoading (false)\n    TrackStore.emitChange()\n    break\n  case ActionTypes.TRACK_LIST_FAILURE:\n    TrackStore.setIsLoading (false)\n    tracks = action.error // update store instance\n    TrackStore.emitChange()\n    break\n  case ActionTypes.GET_TRACK_DETAILS:\n    // Take action - Make API call and update state\n    TrackStore.setIsLoading (true)\n    TrackWebApiUtils.getTrackDetails(action.searchText)\n    TrackStore.emitChange()\n    break\n  case ActionTypes.TRACK_DETAILS_SUCCESS:\n    TrackStore.setIsLoading (false)\n    details = action.data // update store instance\n    TrackStore.emitChange()\n    break\n  case ActionTypes.TRACK_DETAILS_FAILURE:\n    TrackStore.setIsLoading (false)\n    details = action.error // update store instance\n    TrackStore.emitChange()\n    break\n  default:\n    // do nothing\n  }\n})\n\nexport default TrackStore\n","import React, { Component } from 'react'\n// import { GridList, GridListTile } from '@material-ui/core'\nimport TrackActionCreator from '../TrackActionCreator'\n// import TrackCard from './TrackCard'\nimport TracksLoading from '../views/TracksLoading'\nimport TrackList from './TrackList'\nimport TrackStore from '../TrackStore'\n\n// Private function that gets values from store\nfunction getStateFromTrackStore() {\n  // console.log('TrackCardList ' + this.state.trackList)\n  return {\n    tracks: TrackStore.getTrackList(),\n    isLoading: TrackStore.getIsLoading()\n  }\n}\n\nexport default class Tracks extends Component {\n  constructor(props) {\n    super(props)\n\n    // Set view's state based on store data\n    this.state = getStateFromTrackStore()\n    this.onTrackChange = this.onTrackChange.bind(this)\n  }\n\n  // Subscribe to store events on mount\n  componentDidMount() {\n    TrackActionCreator.getTrackList('')\n    TrackStore.addChangeListener(this.onTrackChange)\n  }\n\n  // Un-Subscribe to store events on un-mount\n  componentWillUnmount() {\n    TrackStore.removeChangeListener(this.onTrackChange)\n  }\n\n  // Store uses this as callback fn when store is updated\n  onTrackChange() {\n    this.setState(getStateFromTrackStore())\n  }\n\n  render() {\n    const { tracks } = this.state\n    const { isLoading } = this.state\n\n    return (\n      <div>\n        {isLoading\n          ? <TracksLoading />\n          : <TrackList trackList={tracks} />\n        }\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport ArtistCardList from './artist/views/ArtistCardList'\nimport { Typography } from '@material-ui/core'\nimport AlbumCardList from './album/AlbumCardList'\nimport Tracks from './tracks/views/Tracks'\nimport './css/Content.css'\n\nconst Content = props => {\n  const searchResults = props.searchText\n    ? `Searching for ${props.searchText}`\n    : null\n\n\n  return (\n    <div>\n      <div className='list_container'>\n        <Typography variant='h5' color='textPrimary' >\n          {searchResults}\n        </Typography>\n      </div>\n      <h3 className='List-Label'>Artists</h3>\n      <ArtistCardList />\n      <h3 className='List-Label'>Albums</h3>\n      <AlbumCardList />\n      <h3 className='List-Label'>Tracks</h3>\n      <Tracks />\n    </div>\n  )\n}\n\nexport default Content\n","import React, { Component } from 'react'\nimport { TextField, IconButton, } from '@material-ui/core'\nimport SearchIcon from '@material-ui/icons/Search'\n\n\nclass Search extends Component {\n  constructor(props) {\n    super(props)\n\n    this.onChange = this.onChange.bind(this)\n    this.onKeyPressEnter = this.onKeyPressEnter.bind(this)\n    this.state = {\n      searchText: ''\n    }\n  }\n\n  onChange(event) {\n    this.setState({\n      searchText: event.target.value\n    })\n  }\n\n\n\n  onKeyPressEnter(event) {\n    const { searchText } = this.state\n    const { onInputChange } = this.props\n\n    if (event.keyCode === 13 || event.which === 13) {\n      event.preventDefault() // Ensure it is only this code that run\n      this.setState({\n        searchText: ''\n      })\n      onInputChange(searchText)\n    }\n  }\n\n\n  render() {\n    const { searchText } = this.state\n    const { onInputChange } = this.props\n\n    return (\n      // <div className=\"artist-card__margin\">\n\n      <div style={useStyles.Paper}>\n\n        <TextField\n          value={searchText}\n          onChange={e => {\n            this.onChange(e)\n          }}\n          onKeyPress={e => {\n            this.onKeyPressEnter(e)\n          }}\n\n          id=\"outlined-with-placeholder\"\n          label=\"Search Artists\"\n          placeholder=\"Eg. Coldplay\"\n          style={useStyles.textField}\n          margin=\"normal\"\n          variant=\"outlined\"\n          fullWidth\n        />\n\n        <IconButton\n          style={useStyles.icon}\n          onClick={() => {\n            this.setState({\n              searchText: ''\n            })\n            onInputChange(searchText)\n          }}>\n          <SearchIcon />\n        </IconButton>\n      </div>\n\n    )\n  }\n}\n\nconst useStyles = {\n  Paper: {\n    margin: '10px',\n    paddingLeft: '10px',\n    alignItems: 'center',\n    display: 'flex',\n  },\n  icon: {\n    outline: 'none',\n  },\n}\n\nexport default Search\n","import React, { Component } from 'react'\nimport Header from './components/Header'\nimport Content from './components/Content'\nimport Search from './components/Search'\nimport ArtistActionCreators from './components/artist/ArtistActionCreators'\nimport AlbumActionCreators from './components/album/AlbumActionCreators'\nimport TrackActionCreator from './components/tracks/TrackActionCreator'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      searchText: ''\n    }\n  }\n\n  handleChange(val) {\n    this.setState({ searchText: val })\n    ArtistActionCreators.getArtistList(val)\n    AlbumActionCreators.getAlbumList(val)\n    TrackActionCreator.getTrackList(val)\n  }\n\n\n  render() {\n    const { searchText } = this.state\n    return (\n      <div id=\"music-search-app\">\n        <Header />\n        <Search onInputChange={this.handleChange} />\n        <Content searchText={searchText} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}